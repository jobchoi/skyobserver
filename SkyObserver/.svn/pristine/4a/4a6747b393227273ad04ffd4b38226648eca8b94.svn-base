package com.example.skyobserver;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentStatePagerAdapter;
import androidx.viewpager.widget.ViewPager;

import com.example.skyobserver.msmap.MData;
import com.example.skyobserver.msmap.MStation;
import com.example.skyobserver.msmap.MeasuringStation;
import com.example.skyobserver.nearstation.NearSt_Fragment;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.tabs.TabLayout;


import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
    ViewPager pager;
    Fragment main_Fragment;
    Fragment nearSt_Fragment;
    Fragment statistics_Fragment;
    public static GeoPoint tmset;
    public static final int REQUEST_CODE_MENU = 101;


    public static final int REQUEST_CODE_PERMISSIONS = 1009;


    public static ArrayList<MStation> mStion = new ArrayList<>();
    MData mdata=new MData();
    ArrayList<MData> mdatas = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        final Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
       /* FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });*/
       /* DrawerLayout drawer = findViewById(R.id.drawer_layout);
        NavigationView navigationView = findViewById(R.id.nav_view);
        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        mAppBarConfiguration = new AppBarConfiguration.Builder(
                R.id.nav_home, R.id.nav_gallery, R.id.nav_slideshow,
                R.id.nav_tools, R.id.nav_share, R.id.nav_send)
                .setDrawerLayout(drawer)
                .build();
        NavController navController = Navigation.findNavController(this, R.id.container);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);*/

        DrawerLayout drawer;
        drawer = findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();
        NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        pager = findViewById(R.id.pager);
        pager.setOffscreenPageLimit(3);
        final TabLayout tabs = findViewById(R.id.tabs);

        statistics_Fragment = new Statistics_Fragment();
        nearSt_Fragment = new NearSt_Fragment();
        main_Fragment = new Main_Fragment();

        MyPagerAdapter adapter = new MyPagerAdapter(getSupportFragmentManager(), tabs.getTabCount());

        pager.setAdapter(adapter);
        pager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabs));

        tabs.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                pager.setCurrentItem(tab.getPosition());
                int position = tab.getPosition();


                if (position == 0) {
                    toolbar.setTitle("Main");

                } else if (position == 1) {

                    toolbar.setTitle("Near Station");
                } else if (position == 2) {

                    toolbar.setTitle("Statistics");
                }
            }


            @Override
            public void onTabUnselected(TabLayout.Tab tab) {

            }

            @Override
            public void onTabReselected(TabLayout.Tab tab) {

            }
        });

        BottomNavigationView bottomNavigation = findViewById(R.id.bottom_navigation);
        bottomNavigation.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.tab1:
                        Toast.makeText(getApplicationContext(), "첫 번째 탭 선택됨", Toast.LENGTH_LONG).show();
                        return true;
                    case R.id.tab2:
                        Toast.makeText(getApplicationContext(), "두 번째 탭 선택됨", Toast.LENGTH_LONG).show();
                        return true;
                    case R.id.tab3:
                        Intent intent = new Intent(getApplicationContext(), MapsActivity.class);
                        startActivityForResult(intent, REQUEST_CODE_MENU);

                        return true;
                }

                return false;
            }
        });





    }


    @Override
    protected void onStart() {

        MeasuringStation ms = new MeasuringStation(MainActivity.this);
        try {
            ms.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED
                && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions
                    (this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION,
                            Manifest.permission.ACCESS_COARSE_LOCATION}, REQUEST_CODE_PERMISSIONS);
            return;
        }



        LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);

        try {
            //Location location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);

           // GeoPoint lastLoc = new GeoPoint(location.getLongitude(), location.getLatitude());

            LatLng hanul = new LatLng(35.153469, 126.887775);

            GeoPoint lastLoc = new GeoPoint(hanul.longitude,hanul.latitude);

            GeoPoint tmset = GeoTrans.convert(GeoTrans.GEO, GeoTrans.TM, lastLoc);
            this.tmset=tmset;
            Log.d("process",tmset.getX()+"      "+tmset.getY());
        } catch (Exception e) {
            e.printStackTrace();
        }

        super.onStart();
    }

    public void updateProducts(final ArrayList<MStation> mStations) {
        this.mStion = mStations;
    }



    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
/*

    @Override
    public boolean onSupportNavigateUp() {
        NavController navController = Navigation.findNavController(this, R.id.container);
        return NavigationUI.navigateUp(navController, mAppBarConfiguration)
                || super.onSupportNavigateUp();
    }
*/

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {

        int id = item.getItemId();

        if (id == R.id.nav_home) {

        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {

        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        } else if (id == R.id.nav_tools) {

        }

        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }


    class MyPagerAdapter extends FragmentStatePagerAdapter {


        private int tabCount;

        public MyPagerAdapter(FragmentManager fm, int tabCount) {
            super(fm);
            this.tabCount = tabCount;
        }


        @Override
        public Fragment getItem(int position) {
            Fragment selected = null;
            if (position == 0) {
                selected = main_Fragment;
            } else if (position == 1) {
                selected = nearSt_Fragment;
            } else if (position == 2) {
                selected = statistics_Fragment;
            }
            return selected;
        }

        @Override
        public int getCount() {
            return tabCount;
        }

    }
}
